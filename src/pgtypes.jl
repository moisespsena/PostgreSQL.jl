newpgtype(:null, 0, (Void,))
newpgtype(:bool, 16, (Bool,))
newpgtype(:bytea, 17, (Vector{UInt8},))
newpgtype(:int8, 20, (Int64,))
newpgtype(:int4, 23, (Int32,))
newpgtype(:int2, 21, (Int16,))
newpgtype(:float4, 700, (Float32,))
newpgtype(:float8, 701, (Float64,))
newpgtype(:float4, 1021, (Float32,))
newpgtype(:float8, 1022, (Float64,))
newpgtype(:bpchar, 1042, ())
newpgtype(:varchar, 1043, (ASCIIString,UTF8String))
newpgtype(:text, 25, ())
newpgtype(:numeric, 1700, (BigInt,BigFloat))
newpgtype(:date, 1082, (Date,))
newpgtype(:timestamp, 1114, (DateTime,))
newpgtype(:timestamptz, 1184, (TimeZones.ZonedDateTime,))
newpgtype(:unknown, 705, (Union,NAtype,Void, AbstractString))
newpgtype(:json, 114, (Dict{AbstractString,Any},))
newpgtype(:jsonb, 3802, (Dict{AbstractString,Any},PgJSONb))
newpgtype(:array_int4, 1007, (Array{Int32},))
newpgtype(:array_int8, 1016, (Array{Int64},))
#newpgtype(:tuple, 2249, (Tuple{Vararg{Any}},))
newpgtype(:tuple_int8, 2249, (Tuple{Int64,Int64},))
newpgtype(:array_float4, 1021, (Array{Float32},))
newpgtype(:array_float8, 1022, (Array{Float64},))

const PG_STRING_NAMES = (:bpchar, :varchar, :text, :date)
typealias PGStringTypes Union{oidt(:bpchar),oidt(:varchar),
                              oidt(:text), oidt(:date)}